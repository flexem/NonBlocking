<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard1.0;netstandard2.0;netcoreapp2.1;netcoreapp2.2</TargetFrameworks>

    <PackageId>NonBlocking</PackageId>
    <PackageVersion>1.0.3</PackageVersion>
    <Authors>Vladimir Sadov</Authors> 
    <Description>
      Implementation of a lock-free dictionary on .Net

      Included types:
      === NonBlocking.ConcurrentDictionary
      Lock-free, wait-free implementation of a dictionary.
      - has the same API as System.Collections.Concurrent.ConcurrentDictionary.
      - No locks are taken during any operation including Get, Add, Remove, internal resizes etc...
      - While multiple threads accessing NonBlocking dictionary will help each other in operations such as table resizing, there is no dependency on such behavior. If any thread get unscheduled or delayed for whatever reason, other threads will be able to make progress independently.
      - NonBlocking dictionary scales linearly with the number of active threads if hardware permits.

      On most operations NonBlocking dictionary is faster than Concurrent, especially in write-heavy scenarios.

      There is a subtle difference in the behavior of Remove. Concurrent dictionary removes both the value and the key on Remove, while holding a lock. NonBlocking dictionary only removes values, thus avoiding locking, and the corresponding key is released lazily when more space is needed. In code that relies on deterministic release of key objects (uncommon), Concurrent dictionary would be preferable.

      Core algorithms are based on NonBlockingHashMap, written and released to the public domain by Dr. Cliff Click. A good overview could be found here: https://www.youtube.com/watch?v=HJ-719EGIts

      === Counter32
      === Counter64
      Low-overhead scalable counters.
    </Description>   
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <PackageReleaseNotes>Some performance improvements.</PackageReleaseNotes>
    <Summary>Implementation of a lock-free dictionary on .Net</Summary>
    <Copyright>Copyright 2019 (c) Vladimir Sadov. All rights reserved.</Copyright>
    <PackageTags>lock-free wait-free dictionary high-performance</PackageTags>
    <PackageProjectUrl>https://github.com/VSadov/NonBlocking</PackageProjectUrl>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DocumentationFile>bin\Release\netstandard1.0\NonBlocking.xml</DocumentationFile>
    <DebugType>pdbonly</DebugType>
    <DebugSymbols>true</DebugSymbols>
    <LangVersion>7.3</LangVersion>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <LangVersion>7.3</LangVersion>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <DebugType>full</DebugType>
    <DebugSymbols>true</DebugSymbols>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="System.Runtime.CompilerServices.Unsafe" Version="4.3.0" />
  </ItemGroup>

</Project>